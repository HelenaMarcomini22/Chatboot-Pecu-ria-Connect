from IPython import get_ipython
from IPython.display import display

%pip -q install google-genai

import os
from google.colab import userdata
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google import genai
client = genai.Client()
Model_id = "gemini-2.0-flash"

from IPython.display import HTML, Markdown
response = client.models.generate_content(
    model=Model_id,
    contents='Qual é o valor da arroba do boi hoje no Brasil?',
    config={"tools": [{"google_search":{}}]}
)
display(Markdown(f"Resposta:\n {response.text}"))

print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
print(f"Páginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types # Importação de types aqui
from datetime import date
import textwrap
from IPython.display import display, Markdown
import requests
import warnings

warnings.filterwarnings('ignore')

def call_agent(agent: Agent, message_text: str) -> str:
 session_service = InMemorySessionService()
 session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
 runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
 content = types.Content(role="user", parts=[types.Part(text=message_text)])

 final_response = ""

 for event in runner.run(user_id="user1", session_id="session1", new_message=content):
  if event.is_final_response():
   for part in event.content.parts:
    if part.text is not None:
     final_response += part.text
     final_response += "\n"
 return final_response

def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

def agente_planejador(topico, lancamentos_buscados):
    planejador = Agent(
        name="PlanejadorDeConteudo",
        model="gemini-2.0-flash",
        instruction="""
        Você é um planejador de conteúdo, especialista em redes sociais com foco no agronegócio.
        Com base na lista de lançamentos mais recentes e relevantes buscados, você deve:
        usar a ferramenta de busca do Google (google_search) para criar um plano estratégico sobre
        quais são os pontos mais relevantes e engajadores que poderíamos abordar em um post conciso
        para o LinkedIn sobre cada um deles. Você também pode usar o (google_search) para encontrar mais
        informações sobre os temas, dados de mercado e aprofundar a análise.
        Ao final, você irá escolher o tema mais relevante e com maior potencial de engajamento
        para o público do LinkedIn entre eles com base nas suas pesquisas e no seu conhecimento
        do cenário da pecuária. Retorne esse tema de forma clara e concisa, seus principais pontos
        de destaque (em formato de tópicos) e um breve plano com os assuntos chave a serem abordados
        no post que será escrito posteriormente.
        """,
        description="Agente especializado em planear posts estratégicos e concisos para o LinkedIn sobre pecuária.",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"Tópico: {topico}\nLançamentos buscados: {lancamentos_buscados}"
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

def agente_busca_preco(produto="arroba do boi"):
    buscador_preco = Agent(
        name="BuscadorDePrecos",
        model="gemini-2.0-flash",
        instruction=f"""
        Você é um especialista em informações de mercado pecuário. Sua principal função é buscar o preço
        atualizado de "{produto}" utilizando a ferramenta de busca do Google (google_search).
        Realize uma busca precisa e retorne o valor encontrado, a data da cotação e a fonte da informação
        de forma clara e concisa. Se houver variações regionais significativas, mencione as principais.
        """,
        description="Agente especializado em buscar o preço atualizado da arroba do boi e outras commodities pecuárias.",
        tools=[google_search]
    )
    entrada_do_agente_busca_preco = f"Qual o preço atual de {produto}?"
    preco = call_agent(buscador_preco, entrada_do_agente_busca_preco)
    return preco

def agente_resumo_noticias(noticias):
    resumidor_noticias = Agent(
        name="ResumidorDeNoticias",
        model="gemini-2.0-flash",
        instruction="""
        Você é um especialista em notícias do setor pecuário. Sua tarefa é receber uma lista de notícias
        e produzir resumos concisos e informativos para cada uma delas, destacando os pontos mais relevantes
        para o público do setor. Mantenha a objetividade e a clareza nos seus resumos.
        """,
        description="Agente especializado em resumir notícias e informações relevantes do setor pecuário.",
        tools=[]
    )
    entrada_do_agente_resumo_noticias = f"Resuma as seguintes notícias:\n{noticias}"
    resumos = call_agent(resumidor_noticias, entrada_do_agente_resumo_noticias)
    return resumos

def agente_curador_linkedin(plano_do_post, resumo_noticia=None):
    curador_linkedin = Agent(
        name="CuradorDeConteudoLinkedIn",
        model="gemini-2.0-flash",
        instruction=f"""
        Você é um especialista em criar posts engajadores para o LinkedIn sobre o setor pecuário.
        Com base no plano do post fornecido: "{plano_do_post}", você deve redigir um post conciso,
        informativo e relevante para o público do LinkedIn. Utilize uma linguagem profissional e
        engajadora. Se um resumo de notícia relevante for fornecido ("{resumo_noticia}"), incorpore-o
        de forma natural ao post, conectando os pontos principais com o tema geral. Inclua hashtags relevantes
        para aumentar o alcance da publicação. O post deve ser direto e despertar o interesse dos leitores.
        """,
        description="Agente especializado em criar posts concisos e engajadores para o LinkedIn sobre pecuária.",
        tools=[]
    )
    entrada_do_agente_curador_linkedin = f"Plano do Post: {plano_do_post}\nResumo da Notícia (opcional): {resumo_noticia}"
    post_linkedin = call_agent(curador_linkedin, entrada_do_agente_curador_linkedin)
    return post_linkedin


noticias_pecuaria = ["Notícia A sobre alta nos custos de produção.", "Notícia B sobre novas tecnologias de pastagem.", "Notícia C sobre a influência do clima na produção de carne."]


resumos_noticias = agente_resumo_noticias(noticias_pecuaria)
print("Resumos das Notícias:", resumos_noticias)


plano_post = agente_planejador(topico="Impacto dos custos de produção na pecuária", lancamentos_buscados=resumos_noticias)
print("\nPlano do Post:", plano_post)


post_linkedin = agente_curador_linkedin(plano_do_post=plano_post, resumo_noticia=resumos_noticias[0])
print("\nPost para LinkedIn:", post_linkedin)


preco_arroba = agente_busca_preco()
print("\nPreço da Arroba do Boi:", preco_arroba)
